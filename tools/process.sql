
-- Tidy up the tables generated by osm2pgrouting
ALTER TABLE ways RENAME COLUMN gid TO id,
ALTER TABLE ways ADD COLUMN country text;
ALTER TABLE ways RENAME COLUMN maxspeed_forward TO maxspeed;
ALTER TABLE ways DROP COLUMN maxspeed_backward;
ALTER TABLE ways DROP COLUMN cost_s;
ALTER TABLE ways DROP COLUMN reverse_cost_s;
ALTER TABLE ways DROP COLUMN one_way;
ALTER TABLE ways DROP COLUMN oneway;
ALTER TABLE ways DROP COLUMN priority;
ALTER TABLE ways DROP COLUMN tag_id;
ALTER TABLE ways DROP COLUMN rule;
ALTER TABLE ways DROP COLUMN reverse_cost;

WITH ids_to_delete AS (
    SELECT osm_id
        FROM planet_osm_line
        WHERE electrified='no'
            OR railway<>'rail'
            OR usage in ('industrial', 'military', 'test', 'tourism')
)
DELETE FROM ways
    WHERE id IN (SELECT * FROM ids_to_delete);

-- removes isolated edges
WITH ids_to_delete AS (
    SELECT ways.id FROM ways, ways_vertices_pgr as a, ways_vertices_pgr as b
        WHERE a.cnt = 1 AND b.cnt = 1 AND ways.source = a.id AND ways.target = b.id
)
DELETE FROM ways
    WHERE id IN (SELECT * FROM ids_to_delete);

-- remove isolated chunks of edge

WITH components AS (
    SELECT * FROM pgr_connectedComponents('select * from ways')
),
main_component AS (
    SELECT count(*), component
        FROM components
        GROUP BY component
        ORDER BY count DESC
        LIMIT 1
),
edges_to_delete AS (
    SELECT id
        FROM ways, components, main_component
        WHERE ways.source = components.node
            AND components.component <> main_component.component
)
DELETE FROM ways
    WHERE id IN (SELECT * from edges_to_delete);

-- Set a country to each edge
-- shp2pgsql -D -I -d -s 4326 ne_10m_admin_0_countries.shp | psql furlong
-- attention, long. Environ 1h
update ways set country=iso_a2 from ne_10m_admin_0_countries where st_within(ways.the_geom, ne_10m_admin_0_countries.geom) and iso_a2 <> '-99';

-- Normalizes the speed
UPDATE ways
    SET maxspeed=planet_osm_line.maxspeed::int
    FROM planet_osm_line
    WHERE ways.id = planet_osm_line.osm_id
        AND planet_osm_line.maxspeed ~ '^[0-9]+$';

UPDATE ways
    SET  maxspeed=160
    FROM planet_osm_line
    WHERE ways.id = planet_osm_line.osm_id
        AND usage='main'
        AND ways.maxspeed IS NULL;

UPDATE ways
    SET maxspeed=80
    FROM planet_osm_line
    WHERE ways.id = planet_osm_line.osm_id
        AND usage='branch'
        AND ways.maxspeed IS NULL;

UPDATE ways
    SET maxspeed=30
    FROM planet_osm_line
    WHERE ways.id = planet_osm_line.osm_id
        AND service IS NOT NULL
        AND ways.maxspeed is NULL;

UPDATE ways
    SET maxspeed=30
    WHERE ways.maxspeed is NULL;

-- Computes the cost (the duration in seconds)
-- We consider we can’t go faster than 200 km/h
UPDATE ways
    SET cost = 3.6 * length_m / LEAST(maxspeed, 200);


-- We create a special table with the nodes we actually use
SELECT * INTO nodes
    FROM (
        SELECT source as id, st_point(x1, y1)::geography as geog FROM ways
        UNION (
            SELECT target as id, st_point(x2, y2)::geography as geog from ways
        )
    ) as united
    GROUP BY id, geog;

ALTER TABLE nodes add primary key(id);
CREATE INDEX nodes_geom_idx ON nodes using gist(geog);


-- Import stations from capitaine’s train station.csv
DROP TABLE IF EXISTS stations;
CREATE TABLE stations (
    id INTEGER PRIMARY KEY,
    name TEXT,
    slug TEXT,
    uic TEXT,
    uic8_sncf TEXT,
    latitude FLOAT,
    longitude FLOAT,
    parent_station_id INTEGER REFERENCES stations(id),
    country TEXT,
    time_zone TEXT,
    is_city BOOLEAN,
    is_main_station BOOLEAN,
    is_airport BOOLEAN,
    is_suggestable BOOLEAN,
    country_hint TEXT,
    main_station_hint TEXT,
    sncf_id TEXT,
    sncf_tvs_id TEXT,
    sncf_is_enabled BOOLEAN,
    idtgv_id TEXT,
    idtgv_is_enabled BOOLEAN,
    db_id TEXT,
    db_is_enabled BOOLEAN,
    busbud_id TEXT,
    busbud_is_enabled BOOLEAN,
    distribusion_id TEXT,
    distribusion_is_enabled BOOLEAN,
    flixbus_id TEXT,
    flixbus_is_enabled BOOLEAN,
    cff_id TEXT,
    cff_is_enabled BOOLEAN,
    leoexpress_id TEXT,
    leoexpress_is_enabled BOOLEAN,
    obb_id TEXT,
    obb_is_enabled BOOLEAN,
    ouigo_id TEXT,
    ouigo_is_enabled BOOLEAN,
    trenitalia_id TEXT,
    trenitalia_is_enabled BOOLEAN,
    trenitalia_rtvt_id TEXT,
    ntv_rtiv_id TEXT,
    ntv_id TEXT,
    ntv_is_enabled BOOLEAN,
    hkx_id TEXT,
    hkx_is_enabled BOOLEAN,
    renfe_id TEXT,
    renfe_is_enabled BOOLEAN,
    atoc_id TEXT,
    atoc_is_enabled BOOLEAN,
    benerail_id TEXT,
    benerail_is_enabled BOOLEAN,
    westbahn_id TEXT,
    westbahn_is_enabled BOOLEAN,
    sncf_self_service_machine BOOLEAN,
    same_as INTEGER REFERENCES stations(id),
    info_de TEXT,
    info_en TEXT,
    info_es TEXT,
    info_fr TEXT,
    info_it TEXT,
    info_nb TEXT,
    info_nl TEXT,
    info_cs TEXT,
    info_da TEXT,
    info_hu TEXT,
    info_ja TEXT,
    info_ko TEXT,
    info_pl TEXT,
    info_pt TEXT,
    info_ru TEXT,
    info_sv TEXT,
    info_tr TEXT,
    info_zh TEXT,
    normalised_code TEXT,
    iata_airport_code TEXT
);

-- Obtain the file from https://github.com/trainline-eu/stations
COPY stations
    FROM '/home/tristram/midnight/furlong/stations.csv'
    DELIMITER ';'
    CSV HEADER;

ALTER TABLE stations
    ADD COLUMN geog geography(Point),
    ADD COLUMN node INTEGER REFERENCES nodes(id);

UPDATE stations
    SET geog = st_point(longitude, latitude);

-- Match each station with a node
WITH match_nodes_stations AS(
    SELECT
        nodes.id as node_id,
        stations.id as stations_id
    FROM stations, nodes
    WHERE st_dwithin(nodes.geog, stations.geog, 100)
    GROUP BY (nodes.id, stations.id)
    HAVING st_distance(nodes.geog, stations.geog) = min(st_distance(nodes.geog, stations.geog))
)
UPDATE stations
    SET node = node_id
    FROM match_nodes_stations
    WHERE id = stations_id;
